Scheme:HttpProxy
{
	Read [SourceType=Frame] [SourceName=HttpConnect];
	Read [SourceType=Frame] [SourceName=SslFrame] [Repeat=True];
}

Frame:HttpConnect [LengthType=Dynamic]
{
	string HttpConnect.StartLine (?) [AdvanceMode=StringCompare] [ConditionType=ClosedBy] [ConditionValue="\r\n"],
	vector string HttpConnect.Headers (?) [AdvanceMode=StringCompare] [ConditionType=ClosedBy] [Separator="\r\n"] [Repeat=True] [Enclose="\r\n\r\n"],
	slice HttpConnect.Body (?) [AdvanceMode=Func] [Repeat=False] [ConditionType=Func] [ConditionValue=ReadBodyHttp11],
}

Frame:SslFrame [LengthType=Dynamic]
{
	Item:SslFrame.TlsRecord [Size=5] [LengthType=Defined]
	{
		byte $SslFrame.TlsRecord.RecordType (1),
		Item:SslFrame.TlsRecord.ProtocolVersion [Size=2] [LengthType=Defined]
		{
			byte ProtocolVersion.major (1),
			byte ProtocolVersion.minor (1),
		}
		ushort $SslFrame.TlsRecord.Length (2),
		Item:SslFrame.TlsRecord.Payload [Size=$SslFrame.TlsRecord.Length] [LengthType=Linked]
		{
			Switch ($SslFrame.TlsRecord.RecordType)
			{
			 case (0x16)
				{
					Item:SslFrame.TlsRecord.Payload.HandshakeHeader [Size=4] [LengthType=Defined]
					{
						byte SslFrame.TlsRecord.Payload.HandshakeHeader.messageType (1),
						uint $SslFrame.TlsRecord.Payload.HandshakeHeader.Length (3) [Cast=True], 
						Switch ($SslFrame.TlsRecord.Payload.HandshakeHeader.messageType)
						{
							case (0x00)
							{
							
							}
							case (0x01)
							{
							
							}
							case (default)
							{
			 
							}
						}
					}
					slice SslFrame.TlsRecord.Payload.Data ($SslFrame.TlsRecord.Payload.HandshakeHeader.Length),
				}
			 case (0x17)
				{

				}
			 case (default)
			 {
			 
			 }
			}
		}
	}
}
